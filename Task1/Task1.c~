#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>

int MergeSort(char** , int , int );
int Merge(char **, int, int, int);

void WriteInFile(char* fname, char** arr)
{
  int i =0, j=0;
  FILE *file = NULL;
  file = fopen(fname,"w");
  i=0;
	while(arr[i])
	{
	  j = 0;
	  while(arr[i][j])
	  {
	    putc((arr[i][j]),file);
	    j++;
	  }
	  i++;
	  putc('\n',file);
	}
  fclose(file);
}



int MergeSort(char** array, int start, int end)
{
  if(start<end)
  {
    MergeSort(array, start, (start+end)/2);
    MergeSort(array, (start+end)/2+1, end);
    Merge(array, start, (start+end)/2, end);
  }
  return 0;  
}

int compare(char* First, char* Second)
{
  int i =0;
  while(First[i] && Second[i])
  {
    if (First[i] < Second[i])
      return 1;
    if (First[i] > Second[i])
      return 0;
    if (First[i] == Second[i])
      i++;
  }
  
}

int Merge(char** Array, int Start, int Middle, int End)
{
  char** RezArray;
  
  RezArray = (char **)malloc(sizeof(char *)*(End-Start+1));
  int iFlag1, iFlag2, iSumFlag, i;
  iSumFlag=0;
  iFlag1=Start;
  iFlag2=Middle+1;
  while((iFlag1<=Middle)&&(iFlag2<=End))
  {
     
     if(compare(Array[iFlag1],Array[iFlag2]))
     {
        RezArray[iSumFlag]=Array[iFlag1];
        iSumFlag++;
        iFlag1++;
     } else 
     {
        RezArray[iSumFlag]=Array[iFlag2];
        iSumFlag++;
        iFlag2++;
     }
   }
   for(i=iFlag1; i<Middle+1; i++)
   {
      RezArray[iSumFlag+i-iFlag1]=Array[i];      
   }
   for(i=iFlag2; i<End+1; i++)
   {
      RezArray[iSumFlag+i-iFlag2]=Array[i];      
   }
   for(i=0; i<End-Start+1; i++)
   {
      Array[Start+i]=RezArray[i];
//      printf("0\n");
   }
   return 0;

}

int main(int argc, char* argv[])
{
  
  FILE* file = NULL;
	file = fopen(argv[1],"r");
	
	int arraySize = 0;
	char** arr = NULL;
	char* s = NULL; 
	unsigned char ch;
	
	if (file == 0)
	{
		printf("error\n");
		return 0;
	}
	
  int i = 1;
  int j = 1; 
  ch = getc(file);
  while (!feof(file))
	{

		while (ch != '\n')
    {		
		  i++;
		  s = (char *)realloc(s, sizeof(char) * i);
      s[i-2] = ch;
      s[i - 1] = 0;
      ch = getc(file);
	  }
	  j++;
	  arr = (char **)realloc(arr, sizeof(char *) * j );
	  arr[j-2] = s;
    arr[j-1] = 0;
    arraySize++;    
	  s = NULL;
	  i = 1;
	  ch = getc(file);
	  
	}
	fclose(file);
  
  
  pthread_t thread1, thread2;
  //pthread_create(&thread1, NULL, MergeSort, 0);
  //pthread_create(&thread2, NULL, MergeSort, 0);
  pthread_join(thread1, NULL);
  pthread_join(thread2, NULL);
  
  
  MergeSort(arr, 0, arraySize-1);
  	
	printf("create. writing... %i",arraySize);
	
	WriteInFile(argv[2], arr);
  return 0;
}

